# This workflow will generate documentation using pdoc3 then commit it to the docs/ folder

name: Generate Python Documentation 

on:
  workflow_dispatch:

jobs:
  generate_documentation:
    runs-on: ubuntu-latest
    env: 
      CI_COMMIT_MESSAGE: Continuous Integration Build Artifacts
      CI_COMMIT_AUTHOR: ${{ github.event.repository.name }} Continuous Integration
    strategy:
        fail-fast: false
        matrix:
          python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v3
      with:
        # https://joht.github.io/johtizen/build/2022/01/20/github-actions-push-into-repository.html#adapt-checkout
        ref: ${{ github.event.pull_request.head.ref }}
        token: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}
    - name: Set environment variable "commit-message"
      run: echo "commit-message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
    - name: Set environment variable "commit-author"
      run: echo "commit-author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
    - name: Set environment variable "is-auto-commit"
      if: env.commit-message == env.CI_COMMIT_MESSAGE && env.commit-author == env.CI_COMMIT_AUTHOR
      run: echo "is-auto-commit=true" >> $GITHUB_ENV
    - name: Set up Python ${{ matrix.python-version }}
      if: env.is-auto-commit == false
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      if: env.is-auto-commit == false
      run: |
        python -m pip install --upgrade pip
        python -m pip install build pdoc3 requests setuptools
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Build and install
      if: env.is-auto-commit == false
      run: |
        VERSION_STR=$(python -m build)
        FILE=$(echo $VERSION_STR | grep -oh -E '(jplaw-[0-9]*.[0-9]*.[0-9]*).tar.gz')
        VER=$(echo $FILE | grep -oh -E '([0-9]*.[0-9]*.[0-9]*)')
        echo $FILE
        echo $VER
        echo "VERSION=$VER" >> $GITHUB_ENV
        python -m pip install "dist/$FILE"
    - name: Generate Documentation
      if: env.is-auto-commit == false
      run: |
        rm -rf docs/v${{ env.VERSION }}
        python -m pdoc --html -o docs/v${{ env.VERSION }} jplaw
        mv docs/v${{ env.VERSION }}/jplaw/* docs/v${{ env.VERSION }}/
        rm -r docs/v${{ env.VERSION }}/jplaw/
        python ./scripts/update_versions.py
    - name: Push changes
      if: env.is-auto-commit == false
      run: |
        git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
        git config --global user.email "username@users.noreply.github.com"
        git add .
        git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
        git push
